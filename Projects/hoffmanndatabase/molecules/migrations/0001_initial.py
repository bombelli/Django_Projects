# Generated by Django 4.1.7 on 2023-05-31 09:53

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Molecule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateField(blank=True, null=True)),
                ('compound_structure', models.ImageField(blank=True, help_text='Upload image of the compound structure', null=True, upload_to='compound_images/')),
                ('compound_id', models.CharField(help_text='Enter compound id', max_length=30, unique=True)),
                ('local_name', models.CharField(blank=True, help_text='Enter local name', max_length=100, null=True)),
                ('commercial_name', models.CharField(blank=True, help_text='Enter compound commercial name', max_length=100, null=True)),
                ('cas_number', models.CharField(blank=True, help_text='Enter CAS number', max_length=100, null=True)),
                ('product_code', models.CharField(blank=True, help_text='For only purchased compounds', max_length=100, null=True)),
                ('compound_library_name', models.CharField(help_text='Enter the compound library name', max_length=200, verbose_name='Compound Library Name')),
                ('compound_origin', models.CharField(help_text='Enter the compound origin name', max_length=200)),
                ('au_contact_person_name', models.CharField(blank=True, help_text='Enter full name', max_length=250, null=True, verbose_name='AU Contact Name')),
                ('au_contact_person_email', models.EmailField(blank=True, help_text='Enter email address', max_length=250, null=True, verbose_name='AU Contact Email')),
                ('plate_id', models.CharField(blank=True, help_text='Enter Plate Id', max_length=100, null=True)),
                ('solubility_and_solvent_to_use', models.TextField(blank=True, help_text='Solvent and solvent to use', max_length=200, null=True)),
                ('comments', models.TextField(blank=True, help_text='Additional information', max_length=1000, null=True)),
                ('quantity_received', models.CharField(blank=True, choices=[('dry', 'dry'), ('liquid', 'liquid')], help_text='Quantity received', max_length=10)),
                ('weight', models.FloatField(blank=True, help_text='Enter weight if dry (in mg)', null=True)),
                ('volume', models.FloatField(blank=True, help_text='Enter volume if liquid (in μL)', null=True)),
                ('storage_type', models.CharField(blank=True, choices=[('Storage Pod', 'Storage Pod'), ('Non Storage Pod', 'Non Storage Pod')], help_text='Type of storage used', max_length=20)),
                ('room_temperature', models.FloatField(blank=True, null=True, verbose_name='Room Temperature')),
                ('freezer_temperature', models.CharField(blank=True, choices=[('4', '4 degrees'), ('-20', '-20 degrees'), ('-80', '-80 degrees')], help_text='Freezer Temperature', max_length=4)),
                ('storage_format', models.CharField(blank=True, choices=[('Ind_vial', 'Individual vial'), ('96wp', '96 well plate'), ('384wp', '384 well plate')], help_text='Storage format', max_length=50)),
                ('freezer_name', models.CharField(blank=True, help_text='Freezer name', max_length=50, null=True)),
                ('shelf_or_drawer_number', models.IntegerField(blank=True, null=True)),
                ('box_number', models.IntegerField(blank=True, null=True)),
                ('compound_type', models.CharField(blank=True, help_text='Enter compound type (eg. Small molecule) ', max_length=200, null=True)),
                ('molecular_formula', models.CharField(blank=True, help_text='Enter compound formula', max_length=30, null=True)),
                ('molecular_weight', models.FloatField(blank=True, null=True, verbose_name='Compound molecular weight')),
                ('smiles', models.CharField(blank=True, help_text='Enter compound Smiles', max_length=500, null=True)),
                ('inchl_key', models.CharField(blank=True, help_text='Enter compound Inchl key', max_length=200, null=True)),
                ('logp', models.FloatField(blank=True, help_text='Enter LogP/LogD ', null=True)),
                ('pubchem_cid', models.IntegerField(blank=True, null=True)),
                ('chembl_id', models.CharField(blank=True, help_text='Enter compound id', max_length=30, null=True)),
                ('iupac_name', models.CharField(blank=True, help_text='Enter IUPAC name', max_length=500, null=True)),
                ('commercially_available', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Commercial Availability', max_length=4)),
                ('compound_salt_version', models.CharField(blank=True, help_text='Enter compound salt version', max_length=500, null=True)),
                ('affects_schistosomula', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Does compound affect Schistosomula', max_length=4)),
                ('schistosomula_activity', models.FloatField(blank=True, help_text='(in μM)', null=True, verbose_name='Schistosomula Activity(EC50)')),
                ('affects_juvenile_worms', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Does compound affect Juvenile worms', max_length=4)),
                ('juvenile_worms_activity', models.FloatField(blank=True, help_text='(in μM)', null=True, verbose_name='Juvenile worms Activity(EC50)')),
                ('affects_adult_worms', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Does compound affect Adultworms', max_length=4)),
                ('adult_worms_activity', models.FloatField(blank=True, help_text='(in μM)', null=True, verbose_name='Adult worms Activity(EC50)')),
                ('adultworm_screen_conducted_by', models.CharField(blank=True, help_text='Enter name of person who conducted the adultworm screening', max_length=100, null=True)),
                ('assay_date', models.DateField(blank=True, null=True)),
                ('previous_assay_date', models.DateField(blank=True, null=True)),
                ('putative_human_target', models.CharField(blank=True, help_text='Enter its putative human target', max_length=100, null=True)),
                ('mechanism_of_action', models.TextField(blank=True, help_text='Compound mechanism of action', max_length=1000, null=True)),
                ('invivo_data_available', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Is there any invivo data on the compound', max_length=4)),
                ('fingerprint', models.TextField(blank=True, verbose_name='Fingerprint')),
            ],
            options={
                'ordering': ['-date_added', 'compound_id', 'local_name', 'compound_library_name', 'compound_origin'],
            },
        ),
    ]
